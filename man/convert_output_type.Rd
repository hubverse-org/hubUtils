% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_output_types.R
\name{convert_output_type}
\alias{convert_output_type}
\title{Transform between output types}
\usage{
convert_output_type(
  model_out_tbl,
  terminal_output_type,
  terminal_output_type_id = NA
)
}
\arguments{
\item{model_out_tbl}{an object of class \code{model_out_tbl} containing predictions
with a single, unique value in the \code{output_type} column.}

\item{terminal_output_type}{character vector of the desired output type(s)
following transformation. May contain any of the following output types:
\code{"mean"}, \code{"median"}, \code{"quantile"}}

\item{terminal_output_type_id}{(generally) a named list indicating the desired
output type IDs for each new output type. Can be one of three possible data
types, for the following output types:
\itemize{
\item \code{NA} for \code{"mean"} and \code{"median"} (no associated output type ID)
\item a numeric vector of probability levels for \code{"quantile"}
\item a \code{data.frame} for terminal output types whose associated output type ID value
definitions are dependent on one or more task ID variables. Columns will
consist of those task ID variables and \code{output_type_id}
}

If only one new output type is requested, the singular list item may be supplied
directly. Defaults to \code{NA}. See the examples for an illustration of both cases.}
}
\value{
object of class \code{model_out_tbl} containing (only) predictions of the
terminal output_type(s) for each unique combination of task IDs for each model
}
\description{
Transform between output types for each unique combination of task IDs for each
model. Conversion must be from a single initial output type to one or more
terminal output types, and the resulting output will only contain the terminal
output types. See details for supported conversions.
}
\details{
Currently, only \code{"sample"} can be converted to \code{"mean"}, \code{"median"}, or \code{"quantile"}
}
\examples{
# We illustrate the conversion between output types using normal distributions
ex_quantiles <- c(0.25, 0.5, 0.75)
model_out_tbl <- expand.grid(
  stringsAsFactors = FALSE,
  group1 = c(1,2),
  model_id = "A",
  output_type = "sample",
  output_type_id = 1:100
) |>
dplyr::mutate(value = rnorm(200, mean = group1))

# Multiple output type conversions in one call
convert_output_type(model_out_tbl, terminal_output_type = c("quantile", "median"),
   terminal_output_type_id = list("quantile" = ex_quantiles, "median" = NA))

# Single output type conversion
convert_output_type(model_out_tbl, terminal_output_type = "quantile",
   terminal_output_type_id = ex_quantiles)

}
